#!/usr/bin/env python3
#
# vo - visual organizer, using tkinter from Python
#

import sys
import os
import io
import tkinter as tk
from functools import partial
from tkinter.scrolledtext import ScrolledText
from tkinter.messagebox import askquestion, showwarning, showinfo, askyesnocancel
import tkinter.font as fnt
from tkinter import Text, Entry, Label
from tkinter import ttk
import time

try:
    import sv_ttk
except:
    pass

def detect_fractional_scaling():
    from subprocess import check_output, STDOUT
    try:
        output = check_output(
            ["gsettings", "get", "org.gnome.mutter", "experimental-features"],
            stderr=STDOUT
        ).decode().strip()
        if any(key in output for key in ['scale-monitor-framebuffer', 'fractional-scaling']):
            return True
    except subprocess.CalledProcessError as e:
        pass
    return False

def detect_x11():
    try:
        if os.environ["XDG_SESSION_TYPE"] == "x11":
            return True
    except:
        return False
    
if detect_fractional_scaling():
    if detect_x11():
        FRACFACTOR = 2
    else:
        FRACFACTOR = 1
else:
    FRACFACTOR = 1

# https://sashamaps.net/docs/resources/20-colors/
PALETTE = ['#e6194B', '#3cb44b', '#ffe119', '#4363d8', '#f58231', '#911eb4',
           '#42d4f4', '#f032e6', '#bfef45', '#fabed4', '#469990', '#dcbeff',
           '#9A6324',
           '#fffac8',
           '#800000', '#aaffc3', '#808000', '#ffd8b1', '#000075', '#a9a9a9',
           '#eeeeee',
           '#000000']
ETTELAP = ['#ffffff', '#000000', '#000000', '#ffffff', '#ffffff', '#ffffff',
           '#000000', '#ffffff', '#000000', '#000000', '#ffffff', '#000000',
           '#ffffff',
           '#000000',
           '#ffffff', '#000000', '#ffffff', '#000000', '#ffffff', '#000000',
           '#000000',
           '#ffffff']
SCALELEVEL = 6*FRACFACTOR
SCALES = [0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 1.00, 1.15, 1.30, 1.45,
          1.60, 1.80, 2.00, 2.25, 2.50, 2.75, 3.00, 3.25, 3.50, 3.75, 4.00]
SCALE = SCALES[SCALELEVEL]
FONTFAMILY = 'Liberation Mono' #FONTFAMILY = 'Nimbus Mono PS'
FONTFAMILY = 'Liberation Sans'
FONTPOINTS = 10//FRACFACTOR

# Control buttons functionality
LastSavedState = None
boxes = []
origin = [0,0]
filename = "VizOrg.yaml"

def on_close_button_click(root):
    global boxes, LastSavedState, filename
    contents = yaml_serialize(boxes)
    if contents != LastSavedState:
        savefirst = askyesnocancel(message="There are unsaved changes. Do you wish to save them before exiting?")
    else:
        savefirst = False
    if savefirst:
        with open(filename,"w") as writefile:
            print(contents, end='', file=writefile)            
        LastSavedState = contents
        answer = showinfo(message="Boxes have been saved to "+filename)
    elif savefirst == None:
        return    
    root.destroy()

def yaml_serialize(boxes):
    #create the data first
    stream = io.StringIO()
    print("Boxes:", file=stream)
    for id, box in enumerate(boxes):
        try:
            text = box.text.get("1.0",tk.END)
        except:
            text = ""
        print("  - id:", id, file=stream)
        print("    title: \"" + box.title.get().strip() + '"', file=stream)
        print("    x:", int(box.winfo_x()/SCALE), file=stream)
        print("    y:", int(box.winfo_y()/SCALE), file=stream)
        print("    width:", int(box.width), file=stream)
        print("    height:", int(box.height), file=stream)
        print("    background:", '"'+box["background"]+'"', file=stream)
        if text.strip() == "":
            print("    text: \"\"", file=stream)
        else:
            print("    text: |", file=stream)
            print('\n'.join(['      '+line for line in text.strip().split('\n')]), file=stream)
    contents = stream.getvalue()
    return contents
    
def yaml_deserialize(contents, boxes, area):
    global LastSavedState
    lines = contents.splitlines()
    if lines[0] != "Boxes:":
        print("ERROR: incorrect file format (not yaml?)")
        sys.exit(8)
    i = 0
    thisbox = None
    while i < len(lines):
        rawline = lines[i]
        line = rawline.strip()
        i += 1
        if rawline[:8] == "  - id: ":
            if thisbox:
                boxes.append(Box(area,
                                 thisbox["title"],
                                 thisbox["x"],
                                 thisbox["y"],
                                 thisbox["background"],
                                 thisbox["text"],
                                 thisbox["width"],
                                 thisbox["height"]))
                area.update()
            thisbox = {"x": 0, "y": 0, "background": "white", "title": "Box"+str(i), "text": "", "width": 200, "height": 200}
        elif line[:2] == "x:":
            thisbox["x"] = int(float(line[2:]))
        elif line[:2] == "y:":
            thisbox["y"] = int(float(line[2:]))
        elif line[:13] == 'background: "':
            thisbox["background"] = line[13:-1]
        elif line[:8] == 'title: "':
            thisbox["title"] = line[8:-1]
        elif line[:7] == 'width: ':
            thisbox["width"] = int(float(line[7:]))
        elif line[:8] == 'height: ':
            thisbox["height"] = int(float(line[8:]))
        elif line[:7] == 'text: |':
            nlines = 1
            while i+nlines < len(lines) and lines[i+nlines][:6] == "      ":
                nlines += 1
            thisbox["text"] = '\n'.join([l[6:] for l in lines[i:i+nlines]])
            i += nlines
        elif line == 'Boxes:' or line == 'text: ""':
            pass
        else:
            print("WARNING: Unused option '"+line+"'")
    if thisbox:
        boxes.append(Box(area,
                         thisbox["title"],
                         thisbox["x"],
                         thisbox["y"],
                         thisbox["background"],
                         thisbox["text"],
                         thisbox["width"],
                         thisbox["height"]))
        area.update()
    LastSavedState = contents
    
def rebuild(root, area, rescale=0):
    global boxes, SCALE, SCALELEVEL, SCALES, LastUp
    newscalelevel = SCALELEVEL + rescale
    if newscalelevel < 0: newscalelevel = 0
    if newscalelevel >= len(SCALES): newscalelevel = len(SCALES)-1
    newscale = SCALES[newscalelevel]
    if rescale == 0 or newscale != SCALE:
        scalefactor = newscale/SCALE
        state = yaml_serialize(boxes)
        n = len(boxes)
        LastUpI = None
        # increase the size of the window
        geo = root.winfo_geometry()
        dimensions, x_y = geo.split('+', 1)
        width, height = dimensions.split('x')
        x, y = x_y.split('+')
        width = int(width)
        height = int(height)
        newgeo = str(int(width*scalefactor))+"x"+str(int(height*scalefactor))
        root.geometry(newgeo)
        root.update()
        for i in reversed(range(n)):
            if LastUp == boxes[i]:
                LastUpI = i
            boxes[i].destroy()
            del boxes[i];
        SCALELEVEL = newscalelevel
        SCALE = newscale
        yaml_deserialize(state, boxes, area)
        if LastUpI:
            LastUp = boxes[LastUpI]

def on_help_button_click(obj):
    helpmessage = """vo is a visual organizer of notes in boxes, that are saved as yaml files.
Basic mouse operations:
  Left click on title: start editing
  Left click on text: start editing
  Right click on border: change color
  Left mouse down on border: start move
Basic keyboard operations:
  Ctrl-h : this help
  Ctrl-s : save boxes
  Ctrl-n : create a new box
  Ctrl-+ : increase zoom and window
  Ctrl-- : decrease zoom and window
  Ctrl-f : text search 
  Esc : stop editing
  Alt-Left arrow: decrease box width
  Alt-Right arrow: increase box width
  Alt-Up arrow: decrease box height
  Alt-Down arrow: increase box height
    """
    answer = showinfo(message=helpmessage)

def on_save_button_click(obj):
    global boxes, filename, LastSavedState
    contents = yaml_serialize(boxes)
    with open(filename,"w") as writefile:
        print(contents, end='', file=writefile)
    LastSavedState = contents
    answer = showinfo(message="Boxes have been saved to "+filename)

def on_add_button_click(area,obj):
    global boxes, LastUp
    locx = int(100*SCALE)
    locy = int(100*SCALE)
    col = PALETTE[0]
    if LastUp:
        col = LastUp["background"]
        locx = LastUp.winfo_x() + 20*SCALE
        locy = LastUp.winfo_y() + 20*SCALE
    newbox = Box(area, "Box"+str(len(boxes)), int(locx/SCALE), int(locy/SCALE), col, "")
    boxes.append(newbox)
    LastUp = newbox
    newbox.text.focus_set()
    
# Support dragging of boxes
X=0
Y=0
InAMove = False;
MoveStartX = 0
MoveStartY = 0
LastUp = None
def on_mouse_down(obj, event):
    global InAMove, X, Y, MoveStartX, MoveStartY
    X, Y = obj.winfo_x(), obj.winfo_y()
    InAMove = True
    MoveStartX, MoveStartY = event.x, event.y

def on_mouse_up(obj, event):
    global InAMove, X, Y, MoveStartX, MoveStartY, LastUp
    InAMove = False
    LastUp = obj
    obj.winfo_toplevel().focus_set()
    
def on_mouse_motion(obj, event):
    global InAMove, X, Y, MoveStartX, MoveStartY
    if InAMove:
        if (event.x - MoveStartX != 0) or (event.y - MoveStartY != 0):
            X = X + event.x - MoveStartX
            Y = Y + event.y - MoveStartY
            obj.place(x=X, y=Y)

def on_right_mouse_down(obj, event):
    # find object color
    colornamenow = obj["background"]
    colorindexnow = -1
    for i,c in enumerate(PALETTE):
        if c == colornamenow:
            colorindexnow = i
    newcolorindex =(colorindexnow+1)%len(PALETTE)
    obj["background"] = PALETTE[newcolorindex]
    obj.title.config(background=PALETTE[newcolorindex],fg=ETTELAP[newcolorindex])

def on_x_click(obj):
    global boxes, LastUp
    i = boxes.index(obj)
    if obj == LastUp:
        if i > 0:
            LastUp = boxes[i-1]
        else:
            LastUp = None
    obj.destroy()
    del boxes[i];

def on_width_click(obj,amount,event):
    global LastUp, boxes
    oldwidth = obj.width
    thisbox = {"x":      int(obj.winfo_x()/SCALE),
               "y":      int(obj.winfo_y()/SCALE),
               "background": obj["background"],
               "title":      obj.title.get().strip(),
               "text":       obj.text.get("1.0",tk.END).strip(),
               "width":      obj.width,
               "height":     obj.height}
    parent = obj.master
    i = boxes.index(obj)
    obj.destroy()
    boxes[i] = Box(parent, thisbox["title"], thisbox["x"], thisbox["y"], thisbox["background"],
                   thisbox["text"], thisbox["width"] + 20*amount, thisbox["height"])
    LastUp = boxes[i]

def on_height_click(obj,amount,event):
    global LastUp, boxes
    oldwidth = obj.width
    thisbox = {"x":      int(obj.winfo_x()/SCALE),
               "y":      int(obj.winfo_y()/SCALE),
               "background": obj["background"],
               "title":      obj.title.get().strip(),
               "text":       obj.text.get("1.0",tk.END).strip(),
               "width":      obj.width,
               "height":     obj.height}
    parent = obj.master
    i = boxes.index(obj)
    obj.destroy()
    boxes[i] = Box(parent, thisbox["title"], thisbox["x"], thisbox["y"], thisbox["background"],
                   thisbox["text"], thisbox["width"], thisbox["height"]  + 20*amount )
    LastUp = boxes[i]

def on_alt_arrow_key(area, dx, dy, event):
    global LastUp, boxes
    if not LastUp and area.focus_get() in boxes:
        LastUp = area.focus_get()
    try:
        if not LastUp and area.focus_get().master.master in boxes:
            LastUp = area.focus_get().master.master
    except:
        pass
    if LastUp:
        if dx != 0: on_width_click(LastUp,dx,event)
        if dy != 0: on_height_click(LastUp,dy,event)
    
# Box template
class Box(tk.Frame):
    def __init__(self,parent,title,xloc,yloc,background,text="",width=200,height=200):
        global area
        tk.Frame.__init__(self, parent, width=int(width*SCALE), height=int(height*SCALE),
                          bg=background,
                          highlightbackground='white',
                          highlightthickness=int(3*SCALE))
        colorindex = -1
        for i,c in enumerate(PALETTE):
            if c == background:
                colorindex = i
        colorindex = colorindex%len(PALETTE)
        self.config(takefocus=False)
        self.pack_propagate(False)
        self.place(x=SCALE*xloc, y=SCALE*yloc)
        self.bind('<Motion>', partial(on_mouse_motion, self))
        self.bind("<Button-1>", partial(on_mouse_down, self))
        self.bind("<ButtonRelease-1>", partial(on_mouse_up, self))
        self.bind("<Button-3>", partial(on_right_mouse_down, self))
        linewidth = width//8 - 3
        self.title = Entry(self, width=linewidth+3, justify="center",
                          font=fnt.Font(family=FONTFAMILY,size=int(FONTPOINTS*SCALE)))
        textwidth = linewidth - 1
        textheight = height//16-3
        self.text = ScrolledText(self, height = textheight, width = textwidth, wrap = tk.WORD, font = fnt.Font(family=FONTFAMILY,size = int(FONTPOINTS*SCALE)))
        self.width = width
        self.height = height
        self.orig_xloc = xloc
        self.orig_yloc = yloc
        self.width_button = ttk.Button(self, text=u"∥",
                                       width=1,
                                       command=partial(on_width_click,self,-1,None))
       #                        tk.Button(self, text="<>",
       #                               font = fnt.Font(family=FONTFAMILY, size = int(FONTPOINTS*SCALE)),
       #                               width=2,height=1,padx=0,pady=0,
       #                               command=partial(on_width_click,self,-1,None))
        self.width_button.bind("<Button-3>", partial(on_width_click,self,+1))
        self.width_button.place(relx=0.0, rely=0.0)
        self.width_button.config(takefocus=False)        
        width_width = self.width_button.winfo_reqwidth()
        width_height = self.width_button.winfo_reqheight()
        self.close_button = ttk.Button(self, text="x",
                                       width=1,
                                       command=partial(on_x_click,self))
        #                   tk.Button(self,
        #                             text="x",font = fnt.Font(family=FONTFAMILY, size = int(FONTPOINTS*SCALE)),
        #                              width=2,height=1,padx=0,pady=0,
        #                              command=partial(on_x_click,self))
        self.close_button.place(x=width*SCALE-width_width-7, rely=0.0)
        self.close_button.config(takefocus=False)
        self.title.place(relx=.5,rely=0,anchor='n')
        title_height = self.title.winfo_reqheight()
        topbar_height = title_height
        if (title_height < width_height):
            topbar_height = width_height
            self.title.place(relx=.5,rely=0,height=topbar_height,anchor='n')
        self.title.config(background=background, fg=ETTELAP[colorindex])
        self.title.insert(0,title)
        self.title.config(takefocus=False)
        my_height = self.winfo_reqheight()-2*int(3*SCALE)
        my_width = self.winfo_reqwidth()-2*int(3*SCALE)
        self.text.place(relx=.5,
                        y=topbar_height,
                        height=my_height-2*topbar_height,
                        width=my_width-2*width_width,
                        anchor='n')
        self.text.insert(tk.END,text)
        self.text.vbar.config(takefocus=False)
        self.width_button.place(relx=0.0, rely=0.0, height=topbar_height)
        self.close_button.place(x=width*SCALE-width_width-7, height=topbar_height, rely=0.0)
        
def defocus(area, event):
    global LastUp
    if type(area.focus_get()) == tk.scrolledtext.ScrolledText:
        LastUp = area.focus_get().master.master
    area.focus_set()

def on_arrow_key(area, dx, dy, event):
    global LastUp, boxes
    if not LastUp and area.focus_get() in boxes:
        LastUp = area.focus_get()
    try:
        if not LastUp and area.focus_get().master.master in boxes:
            LastUp = area.focus_get().master.master
    except:
        pass
    if LastUp and type(area.focus_get()) != tk.scrolledtext.ScrolledText:
        nowx, nowy= LastUp.winfo_x(), LastUp.winfo_y()
        LastUp.place(x=nowx+int(dx*SCALE),y=nowy+int(dy*SCALE))

def on_ctrl_arrow_key(area, dx, dy, event):
    global origin, boxes
    if dx != 0 or dy != 0:
        for box in boxes:
            nowx, nowy= box.winfo_x(), box.winfo_y()
            box.place(x=nowx+int(dx*SCALE),y=nowy+int(dy*SCALE))
        origin[0] += int(dx*SCALE)
        origin[1] += int(dy*SCALE)
    else:
        for box in boxes:
            nowx, nowy= box.winfo_x(), box.winfo_y()
            box.place(x=nowx-origin[0],y=nowy-origin[1])
        origin[0] = 0
        origin[1] = 0

def focus_on(result_text,obj,event):
    if (obj.focus_get() == obj):
        find_text(result_text,obj,event)
    else:
        obj.focus_set()

def find_text(result_text,find_entry, event):
    global boxes
    # Get the text from the entry box
    search_text = find_entry.get()
    nresults = 0
    if search_text:
        for box in boxes:
            # Clear any previous search highlights
            box.text.tag_remove("highlight", "1.0", "end")
            start_pos = "1.0"
            while True:
                # Find the position of the text
                start_pos = box.text.search(search_text, start_pos, stopindex="end", nocase=1)
                if not start_pos:
                    # If the text is not found, exit the loop
                    break
                # Get the end position of the found text
                end_pos = f"{start_pos}+{len(search_text)}c"
                # Highlight the found text
                box.text.tag_add("highlight", start_pos, end_pos)
                box.text.tag_config("highlight", background="yellow")
                # Move the search position forward
                start_pos = end_pos
            # Show a message if the text is not found
            if box.text.tag_ranges("highlight"):
                nresults += len(box.text.tag_ranges("highlight"))//2
                failure = False
    if nresults == 1:
        result_text_text = "1 result found"
    else:
        result_text_text = str(nresults)+" results found"
    result_text.delete(1.0, tk.END)
    result_text.insert(tk.END, result_text_text)
    if nresults == 0:
        showinfo(message="No results for '"+search_text+"' were found!")
        
def main():
    global boxes,filename
    # Command line arguments
    # Need --help and other options to be available.
    if len(sys.argv) >= 2:
        filename = sys.argv[1]
    else:
        filename = "VizOrg.yaml"
    # Create the main window
    winx = int(1000*SCALE)
    winy = int(500*SCALE)
    root = tk.Tk()
    try:
        pass #
        #sv_ttk.set_theme("dark")
        sv_ttk.set_theme("dark")
    except:
        pass
    root.title("VizOrg "+filename)
    root.resizable(True, True)
    root.geometry(str(winx)+"x"+str(winy)) 
    root.protocol("WM_DELETE_WINDOW", partial(on_close_button_click,root))
    root.configure(bg="white")
    root.bind("<Double-Button-1>", partial(defocus,root))
    root.bind("<Escape>", partial(defocus,root))
    root.bind("<Left>", partial(on_arrow_key,root,-1,0))
    root.bind("<Right>", partial(on_arrow_key,root,+1,0))
    root.bind("<Up>", partial(on_arrow_key,root,0,-1))
    root.bind("<Down>", partial(on_arrow_key,root,0,+1))
    root.bind("<Shift-Left>", partial(on_arrow_key,root,-15,0))
    root.bind("<Shift-Right>", partial(on_arrow_key,root,+15,0))
    root.bind("<Shift-Up>", partial(on_arrow_key,root,0,-15))
    root.bind("<Shift-Down>", partial(on_arrow_key,root,0,+15))
    root.bind("<Control-Home>", partial(on_ctrl_arrow_key,root,0,0))
    root.bind("<Control-Left>", partial(on_ctrl_arrow_key,root,15,0))
    root.bind("<Control-Right>", partial(on_ctrl_arrow_key,root,-15,0))
    root.bind("<Control-Up>", partial(on_ctrl_arrow_key,root,0,15))
    root.bind("<Control-Down>", partial(on_ctrl_arrow_key,root,0,-15))
    root.bind("<Control-s>", on_save_button_click)
    root.bind("<Control-h>", on_help_button_click)
    root.bind("<Control-n>", partial(on_add_button_click,root))
    root.bind("<Control-equal>",lambda event: rebuild(root,area,+1))
    root.bind("<Control-minus>",lambda event: rebuild(root,area,-1))
    root.bind("<Control-0>",lambda event: rebuild(root,area,6*FRACFACTOR-SCALELEVEL))
    root.bind("<Alt-Up>", partial(on_alt_arrow_key,root,0,-1))
    root.bind("<Alt-Down>", partial(on_alt_arrow_key,root,0,+1))
    root.bind("<Alt-Left>", partial(on_alt_arrow_key,root,-1,0))
    root.bind("<Alt-Right>", partial(on_alt_arrow_key,root,+1,0))
    # Control buttonss
    buttons = tk.Frame(root, bg="white")
    area = tk.Frame(root, bg="#888")
    help_button = ttk.Button(buttons,
                            text="Help",
                            #font = fnt.Font(family=FONTFAMILY,
                            #                size = int(FONTPOINTS*SCALE)),
                            underline=0,
                            command=partial(on_help_button_click,area))
    save_button = ttk.Button(buttons,
                            text="Save",
                            #font = fnt.Font(family=FONTFAMILY,
                            #                size = int(FONTPOINTS*SCALE)),
                            underline=0,
                            command=partial(on_save_button_click,area))
    add_button = ttk.Button(buttons,
                           text="New Box",
                           #font = fnt.Font(family=FONTFAMILY,
                           #                size = int(FONTPOINTS*SCALE)),
                           underline=0,
                           command=partial(on_add_button_click,area,None))
    zoom_in_button = ttk.Button(buttons,
                           text="-",
                           #font = fnt.Font(family=FONTFAMILY,
                           #                size = int(FONTPOINTS*SCALE)),
                           underline=0,
                           command=partial(rebuild,root,area,-1))
    zoom_out_button = ttk.Button(buttons,
                           text="+",
                           #font = fnt.Font(family=FONTFAMILY,
                           #                size = int(FONTPOINTS*SCALE)),
                           underline=0,
                           command=partial(rebuild,root,area,1))
    find_entry = ttk.Entry(buttons, width=40)
    result_text = Text(buttons, width = 16, height=1,font = fnt.Font(family=FONTFAMILY,size = int(FONTPOINTS*SCALE)))
    #result_text = ttk.Text(buttons, width = 16, height=1)
    root.bind("<Control-f>", partial(focus_on,result_text,find_entry)) 
    find_button = ttk.Button(buttons,
                            text="Find",
                            #font = fnt.Font(family=FONTFAMILY,
                            #                size = int(FONTPOINTS*SCALE)),
                            underline=0,
                            command=partial(focus_on,result_text,find_entry,None))
    find_entry.bind("<Return>", partial(find_text,result_text,find_entry))
    help_button.pack(side=tk.LEFT)
    save_button.pack(side=tk.LEFT)
    add_button.pack(side=tk.LEFT)
    zoom_in_button.pack(side=tk.LEFT)
    zoom_out_button.pack(side=tk.LEFT)
    find_entry.config(takefocus=False)
    result_text.config(takefocus=False)
    help_button.config(takefocus=False)
    save_button.config(takefocus=False)
    add_button.config(takefocus=False)
    zoom_in_button.config(takefocus=False)
    zoom_out_button.config(takefocus=False)
    find_button.pack(side=tk.LEFT)
    find_entry.pack(side=tk.LEFT)
    find_button.pack(side=tk.LEFT)
    find_button.config(takefocus=False)
    result_text.pack(side=tk.LEFT)
    buttons.pack(pady=int(SCALE), side=tk.TOP)
    area.pack(side="top", fill="both", expand=True)
    # Create or read boxes
    if os.path.isfile(filename) and len(sys.argv) != 1 :
        with open(filename) as f:
            contents = f.read()
        boxes = []
        yaml_deserialize(contents, boxes, area)
        allwidths = [box.orig_xloc + box.width for box in boxes]
        if allwidths:
            minwidth = SCALE*max(allwidths)
        else:
            minwidth = 0
        if winx < minwidth: winx = int(minwidth*1.05)
        allheights = [box.orig_yloc + box.height for box in boxes]
        if allheights:
            minheight = SCALE*max(allheights)
        else:
            minheight = 0
        if winy < minheight: winy = int(minheight*1.05)
        root.geometry(str(winx)+"x"+str(winy))
        LastSavedState = contents
    else:
        boxes = [
            Box(area, "Editable Title", 100, 100, PALETTE[1], "The file "+filename+" does not yet exists, so here's a box"),
        ]

    # Start the main loop    
    root.mainloop()

if __name__ == "__main__":
    main()
